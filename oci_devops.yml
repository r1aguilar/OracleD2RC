version: 0.1
component: build
timeoutInSeconds: 900        # +5 min para el pull y el escaneo
shell: bash

env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
  exportedVariables:
    - BuildServiceDemoVersion

steps:
  # ───── 1. PREPARACIÓN (igual) ───────────────────────────────────────────
  - type: Command
    name: "Install GraalVM Enterprise 22.x Native Image for Java17"
    command: yum -y install graalvm22-ee-17-native-image

  - type: Command
    name: "Set PATH Variable"
    command: export PATH=$JAVA_HOME/bin:$PATH

  - type: Command
    name: "Docker Login"
    command: |
      cd MtdrSpring
      oci os object get --bucket-name reacttodo-crj8s \
                        --name deployment_config.tgz \
                        --file deployment_config.tgz
      tar -xzvf deployment_config.tgz
      source env.sh
      cat at.cfg | docker login -u "axgw2tdpave8/a01285921@tec.mx" \
                   --password-stdin mx-queretaro-1.ocir.io

  # ───── 2. BUILD (sin cambios) ──────────────────────────────────────────
  - type: Command
    name: "Build"
    failInmediatelyOnError: true      # se deja tu misma clave
    command: |
      cd MtdrSpring
      source env.sh
      (cd backend && source build.sh)

  # ───── 3. 🔐 SECURITY TEST – OWASP ZAP ─────────────────────────────────
  - type: Command
    name: "Security Test – OWASP ZAP"
    command: |
      set -euo pipefail

      # 3-1 Imagen recién construida
      IMAGE=$(docker images --format '{{.Repository}}:{{.Tag}}' | head -n1)
      echo "[INFO] Escaneando $IMAGE"

      # 3-2 Levanta la app (puerto externo 18080 → interno 8080)
      docker run -d --name uut -p 18080:8080 "$IMAGE"

      # 3-3 Espera a que el servicio responda (máx. 2 min)
      for i in {1..24}; do
        curl -s http://localhost:18080/ >/dev/null && break
        sleep 5
      done

      # 3-4 Pull explícito de ZAP desde GHCR
      docker pull ghcr.io/zaproxy/zaproxy:stable \
        || { echo "[ERROR] No se pudo descargar ZAP"; exit 125; }

      mkdir -p MtdrSpring/backend/zap

      # 3-5 Run ZAP baseline
      docker run --rm --network host \
        -v "$(pwd)/MtdrSpring/backend/zap:/zap/wrk" \
        ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t "http://localhost:18080" \
          -m 2 \
          -r zap_report.html \
          -x zap_report.xml \
          -w zap_failcount.txt

      FAILS=$(cat MtdrSpring/backend/zap/zap_failcount.txt)
      docker stop uut && docker rm uut

      if [ "$FAILS" -gt 0 ]; then
        echo "[ERROR] ZAP encontró $FAILS vulnerabilidades Medium/High"
        exit 1
      fi
      echo "[INFO] ZAP baseline PASÓ sin Medium/High"

  # ───── 4. K8s (sin cambios) ────────────────────────────────────────────
  - type: Command
    name: "Install K8s"
    command: |
      mkdir -p $HOME/.kube
      cd $HOME
      mkdir -p k8s && cd k8s
      wget https://dl.k8s.io/v1.31.2/bin/linux/amd64/kubectl
      chmod +x kubectl
      export PATH=$PATH:$HOME/k8s
      kubectl version --client
      oci ce cluster create-kubeconfig \
          --cluster-id ocid1.cluster.oc1.mx-queretaro-1.aaaaaaaaj4geigf35a5xkwdkizx3ypfrnkipq6hjmplkwuxbnczi5nt6e4oa \
          --file $HOME/.kube/config \
          --region mx-queretaro-1 --token-version 2.0.0 \
          --kube-endpoint PUBLIC_ENDPOINT
      export KUBECONFIG=$HOME/.kube/config

  # ───── 5. UNDEPLOY (sin cambios) ───────────────────────────────────────
  - type: Command
    name: "Undeploy"
    ignoreFailure: True
    command: |
      export PATH=$PATH:$HOME/k8s
      kubectl version
      export KUBECONFIG=$HOME/.kube/config
      cd MtdrSpring
      source env.sh
      cd backend
      kubectl config view
      source undeploy.sh

# ───── 6. REPORTES ZAP ───────────────────────────────────────────────────
outputArtifacts:
  - name: zap_html_report
    type: BINARY
    location: MtdrSpring/backend/zap/zap_report.html
  - name: zap_xml_report
    type: BINARY
    location: MtdrSpring/backend/zap/zap_report.xml
