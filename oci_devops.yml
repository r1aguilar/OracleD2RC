version: 0.1
component: build
timeoutInSeconds: 1800        # 30 min – ajusta si el native-image tarda más
shell: bash

###############################################################################
# 1. Entorno
###############################################################################
env:
  variables:
    JAVA_HOME: /usr/lib64/graalvm/graalvm22-ee-java17
    OCIR_REGION: mx-queretaro-1
    OCIR_REPO: ${CONTAINER_REPO_PATH}        # p. ej. axgw2tdpave8/mtdrspring

  exportedVariables:
    - BuildServiceDemoVersion
    - FULL_IMAGE_NAME

###############################################################################
# 2. Pasos
###############################################################################
steps:
  # --------------------------------------------------------------------------
  - type: Command
    name: "Instalar dependencias de build"
    timeoutInSeconds: 600
    command: |
      yum -y install graalvm22-ee-17-native-image docker git maven jq
      systemctl start docker

  - type: Command
    name: "Añadir GraalVM al PATH"
    command: |
      export PATH=$JAVA_HOME/bin:$PATH

  # --------------------------------------------------------------------------
  - type: Command
    name: "Derivar versión (hash corto de commit)"
    command: |
      BuildServiceDemoVersion=$(git rev-parse --short HEAD)
      echo "BuildServiceDemoVersion=$BuildServiceDemoVersion" >> "$OCI_EXPORTS_FILE"

  # --------------------------------------------------------------------------
  - type: Command
    name: "Login a OCIR (token en claro - solo pruebas)"
    command: |
      cd MtdrSpring
      oci os object get --bucket-name reacttodo-rolax \
                        --name deployment_config.tgz \
                        --file deployment_config.tgz
      tar -xzvf deployment_config.tgz
      # token generado en User Settings ▸ Auth Tokens
      docker login -u "axgw2tdpave8/a01285921@tec.mx" \
                   -p "e6k)8n.:E6y[#L{5()jm" \
                   ${OCIR_REGION}.ocir.io

  # --------------------------------------------------------------------------
  - type: Command
    name: "Build Java, crear imagen Docker y push a OCIR"
    command: |
      cd MtdrSpring/backend
      chmod +x build.sh
      ./build.sh
      IMAGE_TAG="$BuildServiceDemoVersion"
      docker build -t ${OCIR_REGION}.ocir.io/${OCIR_REPO}:${IMAGE_TAG} .
      docker push    ${OCIR_REGION}.ocir.io/${OCIR_REPO}:${IMAGE_TAG}
      echo "FULL_IMAGE_NAME=${OCIR_REGION}.ocir.io/${OCIR_REPO}:${IMAGE_TAG}" \
           >> "$OCI_EXPORTS_FILE"

  # --------------------------------------------------------------------------
  - type: Command
    name: "Pruebas Selenium headless"
    command: |
      cd MtdrSpring/tests/selenium
      mvn -B test                     # genera resultados JUnit XML

  # --------------------------------------------------------------------------
  - type: Command
    name: "Pruebas de carga JMeter"
    command: |
      cd MtdrSpring/tests/jmeter
      jmeter -n -t load_test.jmx -l results.jtl

  # --------------------------------------------------------------------------
  - type: Command
    name: "Escaneo OWASP ZAP baseline"
    command: |
      zap-baseline.py \
        -t "https://your-dev-endpoint.com" \
        -J zap_report.json \
        -r zap_report.html

###############################################################################
# 3. Artifact de salida (imagen Docker)
###############################################################################
outputArtifacts:
  - name: containerImage
    type: DOCKER_IMAGE
    location: ${FULL_IMAGE_NAME}
